#!/bin/sh

#
# SPLITUUE
# $Revision: 1.18 $, $Date: 92/03/10 15:08:45 $
# The ultimate news posting utility
# $Log:	splituue,v $
# Revision 1.18  92/03/10  15:08:45  maman
# Updated from version of: theking@graceland.memphis.ORG (Elvis Presley)
# 

########################################
##### SET UP THE DEFAULT VARIABLES #####
########################################
TmpFile="$$-"
b0=`basename ${0}`
# inews=/usr/local/lib/news/inews
inews=/usr/local/bin/inews
Title=""
Type=""
Description=""
file=""
dopost=yes
dodel=yes
douu=yes
NumberOfLines=985
ExpireDate=""
NewsGroup="alt.binaries.pictures.misc"
anonymous=no
repost=""

USAGE="\
USAGE:
	${b0} [-d DESC] [-T TYP] [-NUML] [-e EXP] [-n GROUP] [-nouu]
	      [-nopost] [-nodel] [-t TIT] [-r] [-me] [-anon] file
DESCRIPTION:
    uuencode, split in parts and send images to ${NewsGroup}
    (by default).  When kept, file names start with UUE.{file}.
REQUIRED:
    (options if not furnished asked.)
    -d DESC	: description included in the first message. 
    -T TYP	: tries to match one of the known types with TYP or
		  uses TYP itself as the type.  Then adds that in the
		  subject line.
OPTIONAL:
    -NUML	: NUML lines per message (dflt: ${NumberOfLines}).
    -e EXP	: expire date (dflt: ${ExpireDate}).
    -n GROUP	: messages posted to GROUP (dflt: ${NewsGroup}).  ABP,
		  ABPE, ... may be used.
    -nouu	: don't uuencode the input file ('file' can be a new file)
    -nopost	: doesn't post nor remove prepared messages, just
		  keeps them in place.
    -nodel	: doesn't remove prepared messages but post them.
    -t TIT	: title of the post
    -r		: post is a repost
    -me		: post with real ids. "`
			[ "${anonymous}" = "no" ] && echo "(dflt)"`"
    -anon	: post with anonymous ids. "`
			[ "${anonymous}" = "yes" ] && echo "(dflt)"`"
LIMITATION:
	Only one file allowed at the same time."

##################################################
##### GRAB THE COMMAND LINE OPTIONS (IF ANY) #####
##################################################
while [ ${#} -ne 0 ]
do
    case "${1}" in

##### -x is for debugging
	-x     ) set -x;;

	-[0-9]*) NumberOfLines=`expr "${1}" : '-\([0-9]*\)'`;;
	-t     ) Title="${2}"; shift;;
	-d     ) Description="${2}"; shift;;
	-e     ) ExpireDate="${2}"; shift;;
	-n     ) case "${2}" in
		  ABP)      NewsGroup="alt.binaries.pictures";;
		  ABP[dD])  NewsGroup="alt.binaries.pictures.d";;
		  ABPE)     NewsGroup="alt.binaries.pictures.erotica";;
		  ABPE[dD]) NewsGroup="alt.binaries.pictures.erotica.d";;
		  ABPEB)    NewsGroup="alt.binaries.pictures.erotica.blondes";;
		  ABPF)	    NewsGroup="alt.binaries.pictures.fractals";;
		  ABPM)	    NewsGroup="alt.binaries.pictures.misc";;
		  ABPT)	    NewsGroup="alt.binaries.pictures.tasteless";;
		  *)	    NewsGroup="${2}";;
		 esac; shift;;
	-T     ) Type="${2}"; shift;;
	-r     ) repost=" ^REPOST^";;
	-nopost) dopost=no;;
	-nodel ) dodel=no;;
	-nouu  ) douu=no;;
	-me    ) anonymous=no;;
	-anon  ) anonymous=yes;;

##### Shorthands (add your owns)
	-Txf   ) Type="<X> {f}";;
	-Txff  ) Type="<X> {ff}";;
    -Txfm|-Txmf) Type="<X> {fm}";;
	-Txm   ) Type="<X> {m}";;
	-Txmm  ) Type="<X> {mm}";;
	-blonde) NewsGroup="alt.binaries.pictures.erotica.blondes"
		 Type="<X> {f}";;
	-blondes)NewsGroup="alt.binaries.pictures.erotica.blondes"
		 Type="<X> {ff}";;

	*      ) if [ -z "${file}" ]
		 then file="${1}"
		 else file=""; break
		 fi;;
    esac
    shift
done

#################################
##### SHOW THE USAGE SCREEN #####
#################################
if [ -z "${file}" ]
then
    echo>&2 -n "${USAGE}"
    exit 1
fi

trap 'set -x; /bin/rm -f ${file}.uue ${TmpFile}#*; exit 4' 2

########################################################
##### SET THE ANONYMOUS VARIABLES, IF REQUESTED... #####
########################################################
if [ "${anonymous}" = "yes" ]
then
    ##### Put here what you want for anonymous address
    hostname=${ANONHOSTNAME}
    USER=${ANONUSER}
    NAME=${ANONNAME}
    ORGANIZATION=${ANONORGANIZATION}
    # Here are the anonymous default values if environment variables
    # above unset
    [ -z "${hostname}" ] && hostname="some.where.else"
    [ -z "${USER}" ] && USER="somebody"
    [ -z "${NAME}" ] && NAME="Some Person"
    [ -z "${ORGANIZATION}" ] && ORGANIZATION="Some organization"
    ##### NNTPSERVER may also be another one
    [ -n "${ANONNNTPSERVER}" ] && NNTPSERVER=${ANONNNTPSERVER}
    ##### Constructed from variables above
    Path="${hostname}!${USER}"
    EMAIL="${USER}@${hostname}"
    if [ -n "${NAME}" ]
    then EMAIL="${EMAIL} (${NAME})"
    fi
    export NAME EMAIL ORGANIZATION NNTPSERVER
fi

#############################
##### PART I.  UUENCODE #####
#############################
if [ "${douu}" = "yes" ]
then
    echo>&2 "uuencoding ..."
    # uue ${file}
    uuencode ${file} ${file} > ${file}.uue
else
    cp ${file} ${file}.uue
    echo>&2 "Editing ${file} ..."
    ${EDITOR-vi} ${file}.uue
    echo
fi

###########################
##### PART II.  SPLIT #####
###########################
echo>&2 "spliting ..."

if [ "${douu}" = "yes" ]
then
    split -${NumberOfLines} ${file}.uue ${TmpFile}#
else
    cp ${file}.uue ${TmpFile}#aa
fi

/bin/rm ${file}.uue

NumberOfParts=`/bin/ls -1 ${TmpFile}#* | wc -l`
NumberOfParts=`echo ${NumberOfParts}`

partnumber=-1

#############################################################
##### GET TITLE FOR POST IF NOT ENTERED ON COMMAND LINE #####
#############################################################
if [ -z "${Title}" ]
then
    echo>&2 -n "Title for post ? "
    read Title
fi
if [ -z "${Title}" ]
then
    echo>&2 "Title empty."
    Title=""
else
    Title=" \"${Title}\""
fi

###############################
##### GET TYPE OF POSTING #####
###############################
		if [ "${douu}" = "yes" ]
		then
Types="\
<286>
<386>
<68000>
<8088>
<Aerospace>
<Cartoon>
<Drawing>
<Electronics>
<Fractal>
<Literature>
<Movie>
<Utility>
<empty>
<Bestiality> {ff}
<Bestiality> {fm}
<Bestiality> {f}
<Bestiality> {mm}
<Bestiality> {m}
<Bondage> {ff}
<Bondage> {fm}
<Bondage> {f}
<Bondage> {mm}
<Bondage> {m}
<General> {ff}
<General> {fm}
<General> {f}
<General> {mm}
<General> {m}
<Nc17> {ff}
<Nc17> {fm}
<Nc17> {f}
<Nc17> {mm}
<Nc17> {m}
<Pg> {ff}
<Pg> {fm}
<Pg> {f}
<Pg> {mm}
<Pg> {m}
<Restricted> {ff}
<Restricted> {fm}
<Restricted> {f}
<Restricted> {mm}
<Restricted> {m}
<X> {ff}
<X> {fm}
<X> {f}
<X> {mm}
<X> {m}"

# Maximum number of types
MaxType=`echo "${Types}" | wc -l | sed -e 's/  *//g'`

Choices=`echo "${Types}" |
awk '
BEGIN{nbt=0; fmt="%2d=%s"}
     {t[nbt]=$0; nbt++}
END  {
    le=0
    st=sprintf fmt, 1, t[0]
    for(i=1;i<nbt;i++){
	ch=sprintf fmt, i+1, t[i]
	su=", "
	while(length(st su)%24!=0) su=su " "
	if( (length(st su ch)>72) || (st ~ /empty/) ) {
	    print st
	    st=ch
	}
	else {
	    st=st su ch
	}
    }
    if(st!="") print st
}'`

if [ -n "${Type}" ]
then
    type=`echo "${Types}" | grep "${Type}"`
    case "${type}" in
	*"
"* )	    echo>&2 "Multiple Type match for ${Type}:
	`echo ${type}`"
	    Type=""
	  ;;
	"<empty>") Type=""
	    echo>&2 "Type ${type} not allowed by parameter"
	    Type=""
	  ;;
	*) Type="${type}";;
    esac
fi

if [ -z "${Type}" ]
then
    until
	echo>&2 -n "
Types:
${Choices}
Type number ? (1-${MaxType}) "
	read NType
	[ "${NType}" -gt 0 -a "${NType}" -le ${MaxType} ]
    do
	if [ -z "${NType}" -a ! \( -t 0 -a -t 2 \) ]
	then
	    echo>&2 "Not a terminal and no type.  Exiting."
	    kill -2 $$
	    exit 2
	fi
	echo>&2 "Type #${NType} unknown."
    done
    Type=`
	echo "${Types}" |
	sed -ne "${NType}"' { p; q; }'`
fi
		#####
		#####
		else
Type="<TEXT>"
		fi
Type=`
    echo "${Type}" |
    sed -e 's/<empty>//; s/^ *//; s/ *$//; s/^\(.\)/ \1/'`

if [ "${douu}" = "yes" ]
then
    # If you don't have xloadimage, see below the `gifident'
    # source. Compile it, put it in a place reachable
    # through your PATH.  Then replace `xloadimage -identify'
    # below by `gifident'.
    Datas=`
	( wc -c ${file}
	  xloadimage -identify ${file}
	  # gifident ${file}
	  ) |
	sed -e '
		/unsupported/ d
		s/^[^ ]*\///
		s/ is a \([0-9]*\)x\([0-9]*\) / \1 \2 ! /
		s/ image with / % /
		: loop
		s/ ! \(.*\) \([^ ][^ ]*\) % / ! \1_\2 % /
		t loop
		s/ [%!] / /g
	      '`
    Resolution=`echo "${Datas}" |
	/bin/awk '
		NR==1 { size = $1 }
		NR==2 {
		    printf "%dx%dx2**%d\n", $2, $3, log($5+0.)/log(2+0.)
		}'`
    if [ -n "${Resolution}" ]
    then Resolution=" [${Resolution}]"
    fi
    ImageForm=`echo "${Datas}" |
	/bin/awk '
		NR==1 { size = $1 }
		NR==2 {
		    printf "X-File-Size: %d bytes\n", size
		    printf "X-File-Type: %s\n", $4
		    printf "X-File-Res: %d x %d\n", $2, $3
		    printf "X-File-Bpp: %d\n", log($5+0.)/log(2+0.)
		}'`
fi

suffixl=`expr 11 - "${NumberOfParts}/${NumberOfParts}" : '.*'`
if [ "${suffixl}" -gt 0 ]
then prefix=" "
else prefix=""
fi
while [ "${suffixl}" -gt 0 ]
do
    prefix="-${prefix}"
    suffixl=`expr ${suffixl} - 1`
done
separator="----------------------CUT HERE---------------"

###############################################################################
##### MAIN LOOP: DO EACH SPLIT PART BY ADDING HEADER & DESCRIPTION TO TOP #####
###############################################################################
for i in Description ${TmpFile}#*
do

    partnumber=`expr ${partnumber} + 1`
    case "${i}xx${douu}" in
	Descriptionxxyes) ;;
	Descriptionxxno) continue;;
    esac
    ## leading zero required?
    while [ `expr "${NumberOfParts}" : '.*' - "${partnumber}" : '.*'` -gt 0 ]
    do partnumber=0${partnumber}
    done

    echo>&2 "making part ${partnumber}/${NumberOfParts} ..."

#   Subject="${Title} (${partnumber}/${NumberOfParts}) ${Type}"
    if [ "${douu}" = "yes" ]
    then Subject="- ${file} (${partnumber}/${NumberOfParts})\
${Resolution}${Type}${repost}${Title}"
    else Subject="${Type}${repost}${Title}"
    fi
    (
	##### HEADER #####
	if [ "${anonymous}" = "yes" ]
	then
    echo "\
Path: ${Path}
Newsgroups: ${NewsGroup}
Distribution: world
From: ${EMAIL}
Sender: ${EMAIL}
Organization: ${ORGANIZATION}
Subject: ${Subject}
Message-ID: <`date +%m%d%H%M`${partnumber}@${hostname}>
Reply-To: ${EMAIL}
Keywords: Anonymous posts
Expires: ${ExpireDate}
Approved: By me"
	else echo "\
Newsgroups: ${NewsGroup}
Subject: ${Subject}
Expires: ${ExpireDate}
Distribution: world"
	fi
	if [ "${douu}" = "yes" ]
	then
	    echo "Followup-To: ${NewsGroup}.d"
	fi
	echo ""
	##### END OF HEADER #####
	# These next 3 must exist according to standards.
	if [ "${douu}" = "yes" ]
	then
	    echo "\
X-File-Name: ${file}
X-Part: ${partnumber}
X-Part-Total: ${NumberOfParts}"
	fi
	if [ "${partnumber}" -ne 0 ]
	then
	    if [ "${douu}" = "yes" ]
	    then
		echo "X-Part-Sum: `sum ${i} | awk '{print $1, $2}'`
"
	    fi
	    if [ "${douu}" = "yes" ]
	    then
		echo "BEGIN${separator}${prefix}${partnumber}/${NumberOfParts}"
		cat ${i}
		echo "END--${separator}${prefix}${partnumber}/${NumberOfParts}"
	    else
		cat ${i}
	    fi
	else
	    ##### Description part #####
	    echo "${ImageForm}
X-File-Sum: `sum ${file} | awk '{print $1, $2}'`"
#	    giftest -post ${file}
	    while [ -z "${Description}" ]
	    do
		echo>&2 "Description, notes ? (empty line ends)"
		TheDesc=""
		tab=""
		while read LIGNE; [ -n "${LIGNE}" ]
		do TheDesc="${TheDesc}${tab}${LIGNE}"
		   tab="
"
		done
		Description="${TheDesc}"		
		if [ -z "${Description}" -a ! \( -t 0 -a -t 2 \) ]
		then
		    echo>&2 "Not a terminal and no description.  Exiting."
		    kill -2 $$
		    exit 3
		fi
		if [ -z "${Description}" ]
		then echo>&2 "Non-empty description required."
		fi
	    done
	    echo "${Description}
" |
	    while read LIGNE; [ -n "${LIGNE}" ]
	    do
		echo "X-File-Desc: ${LIGNE}"
	    done
	fi
    ) > UUE.${file}.${partnumber}.${NumberOfParts}

    case "${i}" in
	${TmpFile}#*) /bin/rm ${i};;
	*    ) ;;
    esac

###########################################################
##### SEND THE POST OUT TO INEWS, IF IT WAS REQUESTED #####
###########################################################
    if [ "${dopost}" = "yes" ]
    then
	[ "${anonymous}" = "yes" ] && \
	mv ${HOME}/.signature ${HOME}/.signature.UUE.$$
	echo>&2 "sending file..."
	if ${inews} -h < UUE.${file}.${partnumber}.${NumberOfParts}
	then
	    if [ "${dodel}" = "yes" ]
	    then
		echo>&2 "deleting ..."
		/bin/rm UUE.${file}.${partnumber}.${NumberOfParts}
	    fi
	    echo>&2 "Part ${partnumber}/${NumberOfParts} sent."
	    sleep 5
	else
	    echo>&2 "failed."
	    echo>&2 "Part ${partnumber}/${NumberOfParts} unsent and not removed."
	fi
	[ "${anonymous}" = "yes" ] && \
	mv ${HOME}/.signature.UUE.$$ ${HOME}/.signature
    fi

done

#######################################
##### ALL DONE... GET OUT OF HERE #####
#######################################
echo>&2 "All parts done."

exit

#####################################################################
# If you dont have xloadimage, compile and use the following instead
# Compile with `cc gifident.c -o gifident'.

/*
 * Revision 1.2  92/01/22  18:24:21  maman
 * New options -f0 and -f1
 * 
 * Revision 1.1  91/08/07  10:31:01  maman
 * Cleaner version for lint.
 * 
 */

#include <stdio.h>

int i;
typedef struct 
{
    char type[6];
    unsigned short width, height;
    char planes;
} GIF_HEAD;

char c, *d;
GIF_HEAD thebytes;
unsigned short test = 256*'A'+'B';
FILE *thefile;
int flag = 0;

main(argc,argv)
     char **argv;
     int argc;
{
    if( (char) test == 'B' ) flag=1;

    for(i=1; i<argc; i++)
    {
	if( strcmp(argv[i],"-f0") == 0 ) flag=0;
	else if( strcmp(argv[i],"-f1") == 0 ) flag=1;
	else if( (thefile = fopen(argv[i], "r"))==NULL )
	(void) printf("%s: image not found\n", argv[i]);
	else
	{
	    if( fread( (char*) &thebytes, sizeof(GIF_HEAD),
		      1, thefile)==0 )
	    {
		(void) fprintf(stderr, "%s: premature EOF!\n", argv[i]);
	    }
	    else
	    {
		if( strncmp("GIF", thebytes.type, 3) != 0 )
		(void) printf("%s: unknown or unsupported image type\n",
			      argv[i]);
		else
		{
		    if(flag==1)
		    {
			d = (char*) &(thebytes.width);
			c = d[1];
			d[1] = d[0];
			d[0] = c;
			d = (char*) &(thebytes.height);
			c = d[1];
			d[1] = d[0];
			d[0] = c;
		    }

		    (void) printf("%s is a %ux%u GIF image with %u colors\n",
				  argv[i], thebytes.width, thebytes.height,
				  (short) 2 << (thebytes.planes & 0x07) );
		}
	    }
	    (void) fclose(thefile);
	}
    }
    return(0);
}
