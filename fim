#!/usr/local/bin/perl -w

# fim, a File Integrity Monitor. Helps spot trojan horses
# or other debris left by intruders.
#
# fim [-n] [-v] [hosts...]
# -n argument means don't update the database of checksums &c.
# -v means print various things.
#
# fim scans various system files and maintains a database of
# MD5 checksums, owners, modes, and lengths. It prints out
# any differences it detects since the last time it was run.
# If you run it with -n, fim won't update the database,
# but will print differences. fim also remembers the contents of
# selected system configuration files and spits out diffs.
#
# By default, fim scans the local machine and puts its database
# in the directory $HOME/.gjn/<localhostname>/.
#
# If you supply fim with a host name, it will scan that host
# but store its database locally. This lets you run
# fim from a secure host (with $HOME on a local hard drive),
# increasing your chances of detecting a break-in without anyone
# tampering with fim or its database. fim needs to be able to
# ssh to the remote host and run cc in /tmp.
#
# If you don't have the patience to check all of your hosts,
# at least check servers and any machine that runs network
# daemons (sendmail, telnetd, imapd, httpd, &c). If you run
# fim from crontab on an insecure machine, you may also want
# to keep an entirely separate fim database on a secure
# machine on which you start fim manually from time to time.
#
# The point is to look for inexplicable changes to system
# binaries and configuration files, newly created files
# with suspicious names like /usr/lib/... or "/sbin/test ",
# or new setuid files.
#
# fim has built-in lists of directories and files to scan; see
# @dirs, @files, @nofiles, @archive, and @sdirs below. These
# lists are appropriate for OpenBSD, Digital's OSF1, Solaris,
# and HP-UX. You may wish to add entries for other systems.
#
# You don't need to run fim as root, and probably shouldn't,
# though some operating systems read-protect interesting files
# that fim would like to checksum.
#
# fim requires Perl 5. It may also need a larger-than-default
# data size limit; try the csh command "limit datasize unlimited".
#
# Version 1.0
# Robert Morris
# rtm@eecs.harvard.edu
# http://www.eecs.harvard.edu/~rtm/

# How to run commands on a remote host:
#my $rsh = "rsh";
my $rsh = "ssh -a -e none -x";

# Check files in these directories.
# fim doesn't descend into sub-directories.
my @dirs =
    (
     "/",
     "/dev",
     "/devices",
     "/kernel",
     "/.ssh",
     "/root",
     "/root/.ssh",
     "/stand",
     "/etc",
     "/etc/auth/system",
     "/etc/auth/subsystems",
     "/etc/init.d",
     "/etc/rc0.d",
     "/etc/rc2.d",
     "/etc/rc3.d",
     "/etc/switch",
     "/etc/dfs",
     "/etc/ssh2",
     "/etc/lib",
     "/etc/mail",
     "/etc/inet",
     "/etc/periodic",
     "/etc/periodic/daily",
     "/etc/periodic/weekly",
     "/etc/periodic/monthly",
     "/sbin",
     "/sbin/init.d",
     "/sbin/rc0.d",
     "/sbin/rc2.d",
     "/sbin/rc3.d",
     "/bin",
     "/var/yp",
     "/var/yp/src",
     "/usr",
     "/usr/bin",
     "/usr/lib",
     "/usr/lib/uucp",
     "/usr/ucb",
     "/usr/ucblib",
     "/usr/ccs/bin",
     "/usr/etc",
     "/usr/shlib",
     "/usr/sbin",
     "/usr/lbin",
     "/usr/X11R6/bin",
     "/usr/X11R6/lib",
     "/usr/bin/X11",
     "/usr/bin/mh",
     "/usr/kerberos/bin",
     "/usr/kerberos/lib",
     "/usr/kerberos/etc",
     "/usr/libdata",
     "/usr/libexec",
     "/usr/local/bin",
     "/usr/local/lib",
     "/usr/local/etc",
     "/usr/local/etc/rc.d",
     "/usr/local/sbin",
     "/usr/local/libexec",
     );

# Check these files.
my @files =
    (
     "/var/spool/cron/crontabs/root",
     "/var/spool/cron/crontabs/sys",
     "/var/spool/cron/crontabs/adm",
     "/var/cron/tabs/root",
     "/var/named/master/named.boot",
     "/var/named/master/param.pl",
     "/etc/namedb/named.boot"
     );

# Ignore files that match these regexps.
# They are anchored with ^...$
# These files are only ignored if they're not directories
# and not executable.
my @nofiles =
    (
     "/etc/ntp.drift",
     "/dev/tty.*",
     "/etc/mnttab",
     "/usr/lib/sendmail.st",
     "/etc/wtmp",
     "/dev/console",
     "/etc/utmp",
     "/etc/utmpx",
     "/etc/wtmpx",
     "/etc/rmtab",
     "/dev/console",
     "/etc/skeykeys",
     "/etc/rc.log",
     "/.Xauthority",
     "/var/yp/ypxfr.log"
     );

# Archive files that match these regexps, for diffing.
my @archive =
    (
     ".*/\\.rhosts",
     ".*/\\.shosts",
     ".*/\\.cshrc",
     ".*/\\.login",
     ".*authorized_keys",
     ".*cron.tab.*",
     ".*crontab.*",
     "/etc/exports",
     "/etc/fstab",
     "/etc/vfstab",
     "/etc/dfs/sharetab",
     "/etc/dfs/dfstab",
     ".*/group",
     "/etc/ftpusers",
     "/etc/hosts",
     "/etc/hosts.equiv",
     "/etc/hosts.allow",
     ".*/inetd.conf",
     "/etc/inittab",
     "/etc/account_expiration",
     "/etc/snmpd.conf",
     ".*/named.boot",
     ".*/named.conf",
     "/etc/passwd",
     "/etc/netconfig",
     "/var/yp/src/passwd",
     ".*akefile",
     "/etc/rc.*",
     "/etc/resolv.conf",
     "/etc/securettys",
     ".*/sendmail.cf",
     "/etc/services",
     "/etc/shells",
     ".*/ssh_config",
     ".*/sshd_config",
     ".*/ssh2_config",
     ".*/sshd2_config",
     "/etc/sudoers",
     "/etc/svc.conf",
     "/etc/sysconfigtab",
     ".*/aliases",
     ".*/user-aliases",
     "/etc/XF86Config",
     "/etc/master.passwd",
     "/etc/daily",
     "/etc/security",
     "/etc/weekly",
     "/etc/monthly",
     "/etc/crontab",
     "/usr/lib/crontab",
     "/etc/sysconfig",
     "/etc/netstart",
     "/etc/netlinkrc",
     "/etc/netnfsrc",
     "/etc/netnfsrc2",
     "/etc/netbsdsrc",
     "/etc/src.sh",
     "/etc/set_parms",
     "/etc/mrouted.conf",
     "/etc/ntp.conf",
     "/etc/sm.cf",
     "/etc/snmpd.conf",
     ".*/init.d/.*",
     ".*/amd.mshome",
     ".*/mailhost",
     ".*/netgroup",
     ".*/amd.sun4",
     ".*/ypservers",
     ".*/nsswitch.conf",
     ".*/printcap",
     "/etc/periodic/daily/.*",
     "/etc/periodic/weekly/.*",
     "/etc/periodic/monthly/.*",
     );

# Directories in which to do recursive setuid searches,
# fim won't cross file system boundaries when searching
# for setuid files.
my @sdirs =
    (
     "/",
     "/var",
     "/tmp",
     "/usr/share",
     "/usr/lib",
     "/usr/man",
     "/usr/adm",
     "/usr/doc",
     "/usr/bin",
     "/usr/dict",
     "/usr/examples",
     "/usr/sbin",
     "/usr/etc",
     "/usr/ucb",
     "/usr/tmp",
     "/usr/5bin",
     "/usr/5lib",
     "/usr/kvm",
     "/usr/mdec",
     "/usr/include",
     "/usr/msgs"
);

use strict;
use FileHandle;
use POSIX;

$| = 1;

my $nflag = 0;
my $vflag = 0;
my $tflag = 0;

my $hostname;
my $dbd;
my %oh;
my %nh;
my $changed = 0;
my $fh;
my $th;

if(int(rand() * 1000000) == 513870){
    srand(getpid());
}

my @hosts;
my $a;
foreach $a (@ARGV){
    if($a eq "-n"){
        $nflag = 1;
    } elsif($a eq "-v"){
        $vflag += 1;
    } elsif($a eq "-t"){
        $tflag += 1;
    } elsif($a !~ /^-/){
        push(@hosts, $a);
    } else {
        usage();
    }
}

if($#hosts < 0){
    dohost(undef);
} else {
    for(@hosts){
        if($#hosts > 0){
            print "\nhost: $_\n\n";
        }
        dohost($_);
    }
}

sub dohost {
    my($h) = @_;

    %oh = ();
    %nh = ();
    $changed = 0;

# set up a pair of pipes to the worker program.
    my $cmd;
    if($tflag){
        $cmd = "rfimd";
    } else {
        $cmd = "/bin/sh";
    }
    if(defined($h)){
        $hostname = $h;
        ($fh, $th) = pipe2("$rsh $hostname exec $cmd");
    } else {
        $hostname = `hostname`;
        ($fh, $th) = pipe2("$cmd");
    }

    if($tflag == 0){
        my $ptf = randstring(6);
        my $eof = randstring(16);
        if($hostname =~ /^endor/ || $hostname =~ /^speed/ || $hostname =~ /^hershey/){
# SunOS 4.1.3 may need a sleep(15) here.
# or maybe a sleep until ssh finishes connecting. Maybe.
            sleep(20);
        }
        print $th "cd /tmp\n";
        print $th "cat > ${ptf}.c <<'$eof'\n";
        print $th <<'EOF';
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>

static
getln(buf)
char buf[];
{
  int len;

  if(fgets(buf, 1024, stdin) == 0)
    exit(0);
  buf[1023] = '\0';
  len = strlen(buf);
  if(len > 0 && buf[len-1] == '\n')
    buf[len-1] = '\0';
}

static
dostat(name)
char name[];
{
  struct stat sb;

  if(stat(name, &sb) < 0){
    printf("\n");
    return;
  }
  
  if((sb.st_mode & S_IFMT) == S_IFREG){
    printf("R ");
  } else if((sb.st_mode & S_IFMT) == S_IFDIR){
    printf("D ");
  } else if((sb.st_mode & S_IFMT) == S_IFBLK){
    printf("B ");
  } else if((sb.st_mode & S_IFMT) == S_IFCHR){
    printf("C ");
  } else if((sb.st_mode & S_IFMT) == S_IFIFO){
    printf("F ");
  } else {
    printf("_ ");
  }

  printf("%d ", sb.st_uid);
  printf("%o ", sb.st_mode);
  if((sb.st_mode & S_IFMT) == S_IFBLK || (sb.st_mode & S_IFMT) == S_IFCHR)
    printf("%d ", sb.st_rdev);
  else
    printf("%ld ", (long)sb.st_size);
  printf("\n");
}

static
isreg(name)
char name[];
{
  struct stat sb;

  if(stat(name, &sb) < 0)
    return(0);
  if((sb.st_mode & S_IFMT) != S_IFREG)
    return(0);
  return(1);
}

static
doread(name)
char name[];
{
  FILE *fp;
  int c;

  if(isreg(name) && (fp = fopen(name, "r"))){
    printf("1\n");
    while((c = getc(fp)) != EOF)
      putchar(c);
    fclose(fp);
  } else {
    printf("0\n");
  }
}

static
dodir(name)
char name[];
{
  DIR *d;
  struct dirent *e;

  d = opendir(name);
  if(d){
    while((e = readdir(d))){
      if(e->d_name[0]){
        printf("%s\n", e->d_name); /* what if d_name contains a newline? */
      }
    }
    closedir(d);
  }
}

static
siter(name, dev)
char *name;
dev_t dev;
{
  DIR *d;
  struct dirent *e;
  struct stat st;
  int len;
  char *p;

  if(lstat(name, &st) < 0)
    return;
  if(st.st_dev != dev)
    return;
  if((st.st_mode & S_IFMT) == S_IFREG &&
     (st.st_mode & 06000) &&
     (st.st_mode & 0111)){
    printf("%s\n", name);
  }
  if((st.st_mode & S_IFMT) != S_IFDIR)
    return;

  d = opendir(name);
  if(d){
    while((e = readdir(d))){
      if(e->d_name[0]){
        if(strcmp(e->d_name, ".") == 0 ||
           strcmp(e->d_name, "..") == 0)
          continue;
        len = strlen(name) + strlen(e->d_name);
        p = malloc(len + 2);
        if(p){
          strcpy(p, name);
          strcat(p, "/");
          strcat(p, e->d_name);
          siter(p, dev);
          free(p);
        }
      }
    }
    closedir(d);
  }
}

static
dosetuid(name)
char name[];
{
  struct stat st;

  if(lstat(name, &st) < 0)
    return;
  siter(name, st.st_dev);
}

typedef unsigned long uint32;

struct CKContext {
	uint32 buf[4];
	uint32 bits[2];
	unsigned char in[64];
};

static void CKInit();
static void CKUpdate();
static void CKFinal();
static void CKTransform();

typedef struct CKContext CK_CTX;

static uint32
getu32 (addr)
      unsigned char *addr;
{
	return (((((unsigned long)addr[3] << 8) | addr[2]) << 8)
		| addr[1]) << 8 | addr[0];
}

static void
putu32 (data, addr)
     uint32 data;
     unsigned char *addr;
{
	addr[0] = (unsigned char)data;
	addr[1] = (unsigned char)(data >> 8);
	addr[2] = (unsigned char)(data >> 16);
	addr[3] = (unsigned char)(data >> 24);
}

static void
CKInit(ctx)
     struct CKContext *ctx;
{
	ctx->buf[0] = 0x67452301;
	ctx->buf[1] = 0xefcdab89;
	ctx->buf[2] = 0x98badcfe;
	ctx->buf[3] = 0x10325476;

	ctx->bits[0] = 0;
	ctx->bits[1] = 0;
}

static void
CKUpdate(ctx, buf, len)
     struct CKContext *ctx;
     unsigned char  *buf;
     unsigned len;
{
	uint32 t;

	t = ctx->bits[0];
	if ((ctx->bits[0] = (t + ((uint32)len << 3)) & 0xffffffff) < t)
		ctx->bits[1]++;	/* Carry from low to high */
	ctx->bits[1] += len >> 29;

	t = (t >> 3) & 0x3f;	/* Bytes already in shsInfo->data */

	if ( t ) {
		unsigned char *p = ctx->in + t;

		t = 64-t;
		if (len < t) {
			memcpy(p, buf, len);
			return;
		}
		memcpy(p, buf, t);
		CKTransform(ctx->buf, ctx->in);
		buf += t;
		len -= t;
	}

	while (len >= 64) {
		memcpy(ctx->in, buf, 64);
		CKTransform(ctx->buf, ctx->in);
		buf += 64;
		len -= 64;
	}

	memcpy(ctx->in, buf, len);
}

static void
CKFinal(digest, ctx)
     unsigned char digest[16];
     struct CKContext *ctx;
{
	unsigned count;
	unsigned char *p;

	count = (ctx->bits[0] >> 3) & 0x3F;

	p = ctx->in + count;
	*p++ = 0x80;

	count = 64 - 1 - count;

	if (count < 8) {
		memset(p, 0, count);
		CKTransform(ctx->buf, ctx->in);

		memset(ctx->in, 0, 56);
	} else {
		memset(p, 0, count-8);
	}

	putu32(ctx->bits[0], ctx->in + 56);
	putu32(ctx->bits[1], ctx->in + 60);

	CKTransform(ctx->buf, ctx->in);
	putu32(ctx->buf[0], digest);
	putu32(ctx->buf[1], digest + 4);
	putu32(ctx->buf[2], digest + 8);
	putu32(ctx->buf[3], digest + 12);
	memset(ctx, 0, sizeof(ctx));
}

#define F1(x, y, z) (z ^ (x & (y ^ z)))
#define F2(x, y, z) F1(z, x, y)
#define F3(x, y, z) (x ^ y ^ z)
#define F4(x, y, z) (y ^ (x | ~z))

#define CKSTEP(f, w, x, y, z, data, s) \
	( w += f(x, y, z) + data, w &= 0xffffffff, w = w<<s | w>>(32-s), w += x )

static void
CKTransform(buf, inraw)
     uint32 buf[4];
      unsigned char inraw[64];
{
	register uint32 a, b, c, d;
	uint32 in[16];
	int i;

	for (i = 0; i < 16; ++i)
		in[i] = getu32 (inraw + 4 * i);

	a = buf[0];
	b = buf[1];
	c = buf[2];
	d = buf[3];

	CKSTEP(F1, a, b, c, d, in[ 0]+0xd76aa478,  7);
	CKSTEP(F1, d, a, b, c, in[ 1]+0xe8c7b756, 12);
	CKSTEP(F1, c, d, a, b, in[ 2]+0x242070db, 17);
	CKSTEP(F1, b, c, d, a, in[ 3]+0xc1bdceee, 22);
	CKSTEP(F1, a, b, c, d, in[ 4]+0xf57c0faf,  7);
	CKSTEP(F1, d, a, b, c, in[ 5]+0x4787c62a, 12);
	CKSTEP(F1, c, d, a, b, in[ 6]+0xa8304613, 17);
	CKSTEP(F1, b, c, d, a, in[ 7]+0xfd469501, 22);
	CKSTEP(F1, a, b, c, d, in[ 8]+0x698098d8,  7);
	CKSTEP(F1, d, a, b, c, in[ 9]+0x8b44f7af, 12);
	CKSTEP(F1, c, d, a, b, in[10]+0xffff5bb1, 17);
	CKSTEP(F1, b, c, d, a, in[11]+0x895cd7be, 22);
	CKSTEP(F1, a, b, c, d, in[12]+0x6b901122,  7);
	CKSTEP(F1, d, a, b, c, in[13]+0xfd987193, 12);
	CKSTEP(F1, c, d, a, b, in[14]+0xa679438e, 17);
	CKSTEP(F1, b, c, d, a, in[15]+0x49b40821, 22);

	CKSTEP(F2, a, b, c, d, in[ 1]+0xf61e2562,  5);
	CKSTEP(F2, d, a, b, c, in[ 6]+0xc040b340,  9);
	CKSTEP(F2, c, d, a, b, in[11]+0x265e5a51, 14);
	CKSTEP(F2, b, c, d, a, in[ 0]+0xe9b6c7aa, 20);
	CKSTEP(F2, a, b, c, d, in[ 5]+0xd62f105d,  5);
	CKSTEP(F2, d, a, b, c, in[10]+0x02441453,  9);
	CKSTEP(F2, c, d, a, b, in[15]+0xd8a1e681, 14);
	CKSTEP(F2, b, c, d, a, in[ 4]+0xe7d3fbc8, 20);
	CKSTEP(F2, a, b, c, d, in[ 9]+0x21e1cde6,  5);
	CKSTEP(F2, d, a, b, c, in[14]+0xc33707d6,  9);
	CKSTEP(F2, c, d, a, b, in[ 3]+0xf4d50d87, 14);
	CKSTEP(F2, b, c, d, a, in[ 8]+0x455a14ed, 20);
	CKSTEP(F2, a, b, c, d, in[13]+0xa9e3e905,  5);
	CKSTEP(F2, d, a, b, c, in[ 2]+0xfcefa3f8,  9);
	CKSTEP(F2, c, d, a, b, in[ 7]+0x676f02d9, 14);
	CKSTEP(F2, b, c, d, a, in[12]+0x8d2a4c8a, 20);

	CKSTEP(F3, a, b, c, d, in[ 5]+0xfffa3942,  4);
	CKSTEP(F3, d, a, b, c, in[ 8]+0x8771f681, 11);
	CKSTEP(F3, c, d, a, b, in[11]+0x6d9d6122, 16);
	CKSTEP(F3, b, c, d, a, in[14]+0xfde5380c, 23);
	CKSTEP(F3, a, b, c, d, in[ 1]+0xa4beea44,  4);
	CKSTEP(F3, d, a, b, c, in[ 4]+0x4bdecfa9, 11);
	CKSTEP(F3, c, d, a, b, in[ 7]+0xf6bb4b60, 16);
	CKSTEP(F3, b, c, d, a, in[10]+0xbebfbc70, 23);
	CKSTEP(F3, a, b, c, d, in[13]+0x289b7ec6,  4);
	CKSTEP(F3, d, a, b, c, in[ 0]+0xeaa127fa, 11);
	CKSTEP(F3, c, d, a, b, in[ 3]+0xd4ef3085, 16);
	CKSTEP(F3, b, c, d, a, in[ 6]+0x04881d05, 23);
	CKSTEP(F3, a, b, c, d, in[ 9]+0xd9d4d039,  4);
	CKSTEP(F3, d, a, b, c, in[12]+0xe6db99e5, 11);
	CKSTEP(F3, c, d, a, b, in[15]+0x1fa27cf8, 16);
	CKSTEP(F3, b, c, d, a, in[ 2]+0xc4ac5665, 23);

	CKSTEP(F4, a, b, c, d, in[ 0]+0xf4292244,  6);
	CKSTEP(F4, d, a, b, c, in[ 7]+0x432aff97, 10);
	CKSTEP(F4, c, d, a, b, in[14]+0xab9423a7, 15);
	CKSTEP(F4, b, c, d, a, in[ 5]+0xfc93a039, 21);
	CKSTEP(F4, a, b, c, d, in[12]+0x655b59c3,  6);
	CKSTEP(F4, d, a, b, c, in[ 3]+0x8f0ccc92, 10);
	CKSTEP(F4, c, d, a, b, in[10]+0xffeff47d, 15);
	CKSTEP(F4, b, c, d, a, in[ 1]+0x85845dd1, 21);
	CKSTEP(F4, a, b, c, d, in[ 8]+0x6fa87e4f,  6);
	CKSTEP(F4, d, a, b, c, in[15]+0xfe2ce6e0, 10);
	CKSTEP(F4, c, d, a, b, in[ 6]+0xa3014314, 15);
	CKSTEP(F4, b, c, d, a, in[13]+0x4e0811a1, 21);
	CKSTEP(F4, a, b, c, d, in[ 4]+0xf7537e82,  6);
	CKSTEP(F4, d, a, b, c, in[11]+0xbd3af235, 10);
	CKSTEP(F4, c, d, a, b, in[ 2]+0x2ad7d2bb, 15);
	CKSTEP(F4, b, c, d, a, in[ 9]+0xeb86d391, 21);

	buf[0] += a;
	buf[1] += b;
	buf[2] += c;
	buf[3] += d;
}

static
dock(name)
char name[];
{
  struct CKContext context;
  unsigned char checksum[16];
  int i, cc;
  char buf[8192];
  FILE *fp;

  if(isreg(name) == 0){
    printf("\n");
    return;
  }

  fp = fopen(name, "r");
  if(fp == 0){
    printf("\n");
    return;
  }

  CKInit(&context);
  while((cc = fread(buf, 1, sizeof(buf), fp)) > 0){
    CKUpdate(&context, buf, cc);
  }
  CKFinal(checksum, &context);
  for (i = 0; i < 16; i++){
    printf("%02x", (unsigned int) checksum[i]);
  }
  printf("\n");
  fclose(fp);
}

static
dotest(name)
char name[];
{
  struct CKContext context;
  unsigned char checksum[16];
  int i, cc;
  FILE *fp;

  CKInit(&context);
  CKUpdate(&context, name, strlen(name));
  CKFinal(checksum, &context);
  for (i = 0; i < 16; i++){
    printf("%02x", (unsigned int) checksum[i]);
  }
  printf("\n");
}

main()
{
  char ibuf[1024], sep[1024];
  int len;

  while(1){
    alarm(3600);
    getln(ibuf);
    getln(sep);

    if(ibuf[0] == 'S'){
      dostat(ibuf+1);
    } else if(ibuf[0] == 'R'){
      doread(ibuf+1);
    } else if(ibuf[0] == 'M'){
      dock(ibuf+1);
    } else if(ibuf[0] == 'D'){
      dodir(ibuf+1);
    } else if(ibuf[0] == 'U'){
      dosetuid(ibuf+1);
    } else if(ibuf[0] == 'T'){
      dotest(ibuf+1);
    } else {
      fprintf(stderr, "%02x?\n", ibuf[0] & 0xff);
      exit(1);
    }

    printf("%s\n", sep);
    fflush(stdout);
  }
}
EOF
        print $th "\n$eof\n";
        shsync();
        print $th 'PATH=/opt/SUNWspro/bin:$PATH' . "\n";
        print $th "export PATH\n";
        print $th "cc -O -s -o $ptf ${ptf}.c 2>/dev/null ; rm -f ${ptf}.c ${ptf}.o\n";
        print $th 'PATH=${PATH}:.' . "\n";
        shsync();
        my $stok = randstring(12);
        print $th "echo $stok ; $ptf ; rm -f $ptf ; exit\n";
        while(<$fh>){
            last if /$stok/;
        }
    }

    $hostname =~ s/\..*//;
    $hostname =~ s/[\r\n].*//;
    $dbd = $ENV{"HOME"} . "/.gjn";
    if($nflag == 0 && ! -d $dbd){
        die "mkdir $dbd" if !mkdir($dbd, 0700);
    }
    $dbd .= "/" . $hostname;
    if($nflag == 0 && ! -d $dbd){
        die "mkdir $dbd" if !mkdir($dbd, 0700);
    }

# Test the worker program.
    my $md5junk = rcmd("T0123456789abcdef,.xx");
    if($md5junk ne "1fcba3d77b367a183645cfa41dac8e88\n"){
        print STDERR "fim: md5 test failed on $hostname\n";
        exit(1);
    }

    my $dbf = $dbd . "/db";
    if(defined(open(DBF, $dbf))){
        while(<DBF>){
            s/[\r\n]//g;
            if(/^(.+) ([^ ]+)$/){
                $oh{$1} = $2;
            } else {
                print STDERR "fim: bad line in $dbf\n";
            }
        }
        close(DBF);
    }

    my $f;
    foreach $f (@files){
        dofile($f);
    }

    my $d;
    foreach $d (@dirs){
        my @l = dirlist($d);
        my $f;
        foreach $f (@l){
            my $full = $d . "/" . $f;
            if($f ne "." && $f ne ".." && !defined($nh{$full})){
                dofile($full);
            }
        }
    }

    # recursive search for setuid files.
    # search limited to same file system (really st_dev).
    foreach $d (@sdirs){
        my @l = split(/\n/, rcmd("U$d"));
        my $f;
        foreach $f (@l){
            $f =~ s|/+|/|g;
            if(!defined($nh{$f})){
                dofile($f);
            }
        }
    }

    foreach $f (keys(%oh)){
        if(!defined($nh{$f})){
            print "deleted: $f\n";
            $changed = 1;
        }
    }

    foreach $f (keys(%nh)){
        if(defined($oh{$f})){
            if($oh{$f} ne $nh{$f}){
                print "changed: $f\n";
                $changed = 1;
            }
        } else {
            print "new: $f\n";
            $changed = 1;
        }
    }

    if($nflag == 0 && $changed){
        my $tf = $dbf . "-$$";
        die "fim: $tf: $!" if !open(TF, ">$tf");
        my $f;
        foreach $f (keys(%nh)){
            print TF "$f $nh{$f}\n";
        }
        close(TF);
        rotate($dbf);
        die "fim: rename $tf $dbf: $!" if !rename($tf, $dbf);
    }

    foreach $f (keys(%nh)){
        my $af = $dbd . "/archive" . $f;
        next if defined($oh{$f}) && ($oh{$f} eq $nh{$f}) && -f $af;
        my $xf;
        my $doit = 0;
        foreach $xf (@archive){
            if($f =~ /^$xf$/){
                $doit = 1;
                last;
            }
        }
        if($doit){
            my $tf = $dbd . "/tmp"  . "-$$";
            my $fok = get($f, $tf);
            if($fok && -f $af){
                print "\ndiff: $f\n";
                system("diff $af $tf");
            }
            if($nflag == 0 && $fok){
                my @dl = split(/\//, $af);
                my $dd = "/";
                my $d;
                foreach $d (@dl){
                    if(! -d $dd){
                        my $dtmp = $dd;
                        $dtmp =~ s/\/*$//;
                        if(!mkdir($dtmp, 0700)){
                            print STDERR "fim: mkdir $dtmp: $!\n";
                        }
                    }
                    $dd .= $d . "/";
                }
                rotate($af);
                if(!rename($tf, $af)){
                    print STDERR "fim: rename $tf $af: $!\n";
                }
            }
            unlink($tf);
        }
    }
}

sub rotate {
    my($f) = @_;
    my $i;
    for($i = 5; $i >= 0; $i -= 1){
        rename($f . "." . $i, $f . "." . ($i + 1));
    }
    rename($f, $f . ".1");
}

# Should we ignore this file?
sub ignorep {
    my($f) = @_;
    my $xf;
    foreach $xf (@nofiles){
        if($f =~ /^$xf$/){
            return(1);
        }
    }
    return(undef);
}

# Is an octal file mode executable?
sub execmode {
    my($m) = @_;
    $m =~ s/^.*(...)/$1/;
    if($m =~ /[1357]/){
        return(1);
    }
    return(undef);
}

sub dofile {
    my($f) = @_;
    $f =~ s/\/\//\//g;
 
    my $h = sign($f);
    if($vflag){
        printf(STDERR "$f %s\n", defined($h) ? $h : "?");
    }
    if(defined($h)){
        $nh{$f} = $h;
    }
}

sub sign {
    my($f) = @_;
    my $t1 = rcmd("S$f");
    $t1 =~ s/\n//;
    if($t1 eq ""){
        return(undef);
    }
    my @a = split(/ /, $t1);

    if($a[0] ne "D" && !execmode($a[2]) && ignorep($f)){
        if($vflag){
            print STDERR "Ignoring $f\n";
        }
        return(undef);
    }

    my $md5 = rcmd("M$f");
    $md5 =~ s/\n//;

    my $s = sprintf("%s/%d/0%s/",
                    $md5,
                    $a[1], # uid
                    $a[2]); # mode
    if($a[0] eq "R" || $a[0] eq "C" || $a[0] eq "B"){
        $s .= $a[3]; # size or dev
    }

    return($s);
}

sub usage {
    print STDERR "Usage: fim [flags] [hosts...]\n";
    print STDERR "       -n : do not update file info database\n";
    print STDERR "       -v : verbose\n";
    exit(1);
}

# Run a program.
# Return a pair of pipes from and to the program.
# my($r, $w) = pipe2("ssh -a -e none -x dominator /bin/sh");
sub pipe2 {
    my @args = @_;
    my ($tr, $tw) = FileHandle::pipe();
    my ($fr, $fw) = FileHandle::pipe();

    if(!defined($tw) || !defined($fw)){
        die "pipe";
    }
    
    my $pid = fork();
    if(defined($pid) && $pid > 0){
        # parent
        $tr->close();
        $fw->close();
        autoflush $tw 1; # XXX
        return($fr, $tw);
    } elsif(defined $pid){
        # child
        $tw->close();
        $fr->close();
        close(STDIN);
        close(STDOUT);
        dup2($tr->fileno(), 0) || die "dup2 0";
        dup2($fw->fileno(), 1) || die "dup2 1";
        $tr->close();
        $fw->close();
        exec @args;
        die "$args[0] exited unexpectedly\n";
    } else {
        die "Cannot fork: $!\n";
    }
}

sub randstring {
    my($n) = @_;
    my $s = "";
    my $i;
    for($i = 0; $i < $n; $i++){
        my $x = int(rand(36));
        $s .= substr("abcdefghijklmnopqrstuvwxyz0123456789x", $x, 1);
    }
    return($s);
}

sub rcmd {
    my($cmd) = @_;
    my $ok = 0;

    my $sep = randstring(20);
    print $th "$cmd\n$sep\n";

    my $res = "";
    while(<$fh>){
        $res = $res . $_;
        if($res =~ /\n$/ && $res =~ /$sep/){
            $res =~ s/\n$//;
            $res =~ s/$sep//;
            $ok = 1;
            last;
        }
    }

    if($ok == 0){
        print STDERR "lost rfimd on $hostname ?\n";
        exit(1);
    }

    return($res);
}

sub dirlist {
    my($d) = @_;
    my $x = rcmd("D$d");
    my @l = split(/\n/, $x);
    return @l;
}

sub get {
    my($f, $tf) = @_;
    my $x = rcmd("R$f");
    if($x =~ /^1\n/){
        $x =~ s/^1\n//;
        open(GTF, ">$tf") || die "write $tf";
        print GTF "$x";
        close(GTF);
        return(1);
    } else {
        return(0);
    }
}

sub shsync {
    my $xx = randstring(8);
    print $th "echo $xx\n";
    while(<$fh>){
        if(/$xx/){
            last;
        }
    }
}
